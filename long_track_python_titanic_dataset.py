# -*- coding: utf-8 -*-
"""long_track_Python_Titanic Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w8BxQe1Y-k5uMaEFr4OiPAqdErBw9f1K

# **Titanic Dataset**

# **About Dataset:**

# **Step 1:Import necessary libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# **Step 2:Import the data inside google colab**"""

df = pd.read_csv('/content/titanic.csv')

"""# **Step 3:Data Exploration**"""

# View the first 5 rows
df.head()

df.tail()

df.shape

df.info()

# variables
df.dtypes

df.describe()

"""# **Step 4:Data Cleaning**

Check for missing values,duplicate values,categorical values and outliers and handle them accordingly.

Consider the table is read using variable "df" Then, use the functions like


1.   Check for the column datas types and customise the datatype if necessary
2.   df.isna().sum()
3.   df['colname'].fillna()
4.   df[df.duplicated()]
5.   df.drop_duplicates()
6.   Use box plot to check for outliers
7.   Remove the outliers by any technique
8.   Scaling of numerical features
9.   Encode the categorical data into numerical
10.  Display the clean data


"""

print(df.dtypes)

df['Age'] = df['Age'].fillna(df['Age'].median())

df['Age'] = df['Age'].astype(int)

print(df.dtypes)

# Count the number of missing values in each column
print(df.isna().sum())

df.drop('Cabin', axis=1, inplace=True)

df.drop('PassengerId', axis=1, inplace=True)
df.drop('Name', axis=1, inplace=True)
df.drop('Ticket', axis=1, inplace=True)
df.drop('Fare', axis=1, inplace=True)

df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)

print(df.isna().sum())

# Convert 'Sex' column to numerical
df['Sex'] = df['Sex'].replace({'male': 0, 'female': 1})

# Convert 'Embarked' column to numerical
df['Embarked'] = df['Embarked'].replace({'S': 0, 'C': 1,'Q': 2})

df[df.duplicated()]

#summarize the data
print(df.describe())

df.head()

"""# **Step 5:Data Visualization**
Explain the findings on visualizing the data
(Create atleast 5 charts using matplotlib and seaborne)and one chart using sweet Viz tool

"""

#Total Passengers by Sex

import matplotlib.pyplot as plt
import seaborn as sns

sns.countplot(x='Sex', data=df)
plt.title('Number of Passengers by Sex')
plt.ylabel('Number of Passengers')
plt.show()

df.groupby('Survived').size().plot(kind = 'pie', 
                                   autopct = '%.2f%%', 
                                   labels = ['Died', 'Survived'], 
                                   label = '', 
                                   fontsize = 10,
                                   colors = ['red', 'green']);

sns.histplot(x='Age', data=df, kde=True)
plt.title('Number of passengers group by Ages')
plt.ylabel('Number of Passengers')
plt.show()

sns.countplot(x='Pclass', hue='Survived', data=df)
plt.title('Number of Survivors vs Non-Survivors by Class')
plt.xlabel('Passenger by Class')
plt.ylabel('Number of Passengers')
plt.show()

sns.countplot(x='Sex', data=df, hue='Survived')
plt.title('Number of Survivors vs Non-Survivors by Gender')
plt.ylabel('Number of Passengers')
plt.show()

!pip install sweetviz

# importing sweetviz
import sweetviz as sv

#analyzing the dataset
advert_report = sv.analyze(df)

#display the report
advert_report.show_html('/content/titanic.html')
advert_report.show_notebook()

"""# **Step 6: Data Splitting into train and test**"""

from sklearn.model_selection import train_test_split

X = df.drop('Survived', axis=1)
y = df['Survived']

X.head()

# train 80%, test 20%
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# **Step 7: Model Building**


"""

#Logistic Regression

from sklearn.linear_model import LogisticRegression
lm1= LogisticRegression()
lm1.fit(X_train, y_train)

"""# **Step 8: Model Validation**"""

ypred=lm1.predict(X_test)
ypred

"""# **Step 9:Model Evaluation and Visualization**"""

from sklearn.metrics import accuracy_score
accuracy_score(y_test, ypred)

from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_test, ypred)
print(confusion_matrix)

"""#**Step 10: Creating WebApp using Streamlit**"""